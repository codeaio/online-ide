{"version":3,"sources":["helpers/utils.js","components/IDE.js","App.js","serviceWorker.js","index.js"],"names":["a","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrePolicy","body","JSON","stringify","response","json","IDE","props","state","code","stdout","stderr","error","API","id","cpp","handleSubmit","bind","update","this","colorLabel","document","getElementById","checkbox","console","log","addEventListener","checked","innerText","then","res","status","err","value","setState","setTimeout","event","preventDefault","input","postData","result","_id","type","className","htmlFor","onSubmit","options","theme","lineNumbers","lineWraping","matchBrackets","matchTags","autoCloseTags","autoCloseBrackets","styleActiveLine","nonEmpty","onBeforeChange","editor","name","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f664318a.chunk.js","sourcesContent":["export default async function postData(url='', data = {}) {\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    cache: 'no-cache',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    redirect: 'follow',\n    referrePolicy: 'no-referrer',\n    body: JSON.stringify(data)\n  });\n  return response.json();\n};","import React, { Component } from 'react';\nimport postData from '../helpers/utils.js';\nimport { Controlled as CodeMirror } from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/clike/clike.js';\nimport 'codemirror/addon/edit/closebrackets.js';\nimport 'codemirror/addon/edit/matchbrackets.js';\nimport 'codemirror/addon/edit/closetag.js';\nimport 'codemirror/addon/edit/matchtags.js';\nimport 'codemirror/addon/selection/active-line.js';\n\nexport default class IDE extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: null,\n            stdout: null,\n            stderr: null,\n            error: null,\n            API: \"http://localhost:9000/task\",\n            id: null,\n            cpp: ''\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    componentDidMount() {\n        this.update();\n        var colorLabel = document.getElementById('color');\n        var checkbox = document.getElementById('color-mode');\n        console.log(colorLabel);\n        console.log(checkbox);\n        checkbox.addEventListener('change', () => {\n            if (checkbox.checked) {\n                colorLabel.innerText = \"Light\";\n            } else {\n                colorLabel.innerText = \"Dark\";\n            }\n        });\n    }\n    \n    update() {\n        // console.log(this.state.id);\n        if (this.state.id) {\n            // console.log(\"fetching\");\n            fetch(this.state.API + '/' + this.state.id)\n                .then(res => res.json())\n                .then(data => {\n                    // console.log(data);\n                    if (data.status[0] === 'completed') {\n                        // console.log(\"setting variable\");\n                        var stdout = document.getElementById('stdout');\n                        var stderr = document.getElementById('stderr');\n                        var err = document.getElementById('error');\n                        var status = document.getElementById('status');\n\n                        stdout.value = data.stdout;\n                        stderr.value = data.stderr;\n                        err.value = data.err;\n                        status.innerText = data.status[0];\n\n                        this.setState({\n                            id: null\n                        });\n                    }\n                });\n        }\n        setTimeout(this.update, 2000);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        var code = this.state.cpp;\n        var input = document.getElementById('input').value;\n        var status = document.getElementById('status');\n        // console.log(\"sending\");\n        console.log(code);\n        postData(this.state.API + \"/create\", {\n            code: code,\n            input: input\n        }).then(\n            (result) => { \n                console.log(result);\n                this.state.id = result._id;\n                status.innerText = \"running\";\n            }\n        );\n\n    }\n\n    render() {\n        const { cpp } = this.state;\n        var option = {\n            mode: 'text/x-c++src',\n            theme: 'default',\n            lineNumbers: true,\n            lineWraping: true,\n            matchBrackets: true,\n            matchTags: true,\n            autoCloseTags: true,\n            autoCloseBrackets: true,\n            styleActiveLine: {nonEmpty: true},\n        }\n        return (\n            <div>\n                <input type=\"checkbox\" id=\"color-mode\"></input>\n                <div className=\"body\">\n                    <div className=\"main\">\n                        <div className=\"header\">\n                            <h1 className=\"heading\">C++ IDE</h1>\n                            <label htmlFor=\"color-mode\" id=\"color\">Dark</label>\n                        </div>\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"ide\">\n                                <div className=\"editor\">\n                                    <CodeMirror \n                                        value={cpp}\n                                        options={option}\n                                        onBeforeChange={(editor, data, cpp) => {\n                                            this.setState({ cpp });\n                                        }}\n                                    />\n                                    <div className=\"submit\">\n                                        <input type=\"submit\" value=\"Run\"></input><br></br>\n                                        <h4><span id=\"status\"></span></h4>\n                                    </div>\n                                </div>\n                                <div className=\"io\">\n                                    <div className=\"input\">\n                                        <label htmlFor=\"input\">Input</label><br></br>\n                                        <textarea id=\"input\" name=\"input\"></textarea><br></br>\n                                    </div>\n                                    <div>\n                                        <label htmlFor=\"stdout\">stdout</label><br></br>\n                                        <textarea id=\"stdout\" name=\"stdout\">{ this.state.stdout }</textarea><br></br>\n                                    </div>\n                                    <div>\n                                        <label htmlFor=\"stderr\">stderr</label><br></br>\n                                        <textarea id=\"stderr\" name=\"stderr\">{ this.state.stderr }</textarea><br></br>\n                                    </div>\n                                </div>\n                            </div>\n                                <div className=\"err\">\n                                    <label htmlFor=\"error\">Error</label><br></br>\n                                    <textarea id=\"error\">{ this.state.error }</textarea><br></br>\n                                </div>\n                        </form>                \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport IDE from './components/IDE';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <IDE></IDE>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}